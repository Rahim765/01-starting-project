{"ast":null,"code":"import React__default, { useContext, createElement } from 'react';\nimport clsx from 'clsx';\nimport { createUseStyles } from 'react-jss';\nimport Color from 'color';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar stepStyleDefaults = {\n  activeBgColor: '#ed1d24',\n  activeTextColor: '#ffffff',\n  completedBgColor: '#a10308',\n  completedTextColor: '#ffffff',\n  inactiveBgColor: '#e0e0e0',\n  inactiveTextColor: '#ffffff',\n  size: '2em',\n  circleFontSize: '1rem',\n  borderRadius: '50%'\n};\nvar HOVER_COLOR_DEFAULT_RATIO = 0.15;\nvar ACTIVE_COLOR_DEFAULT_RATIO = 0.2;\n\nvar shadeOrTintColor = function shadeOrTintColor(colorString, ratio) {\n  var color = Color(colorString);\n  return color.isDark() ? color.darken(ratio).hex() : color.lighten(ratio).hex();\n};\n\nvar useStepStyles = /*#__PURE__*/createUseStyles({\n  StepMain: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  StepButton: function StepButton(props) {\n    return {\n      border: 'none',\n      margin: 0,\n      padding: 0,\n      cursor: 'pointer',\n      borderRadius: props.borderRadius,\n      backgroundColor: props.inactiveBgColor,\n      width: props.size,\n      height: props.size,\n      fontSize: '1em',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      '&.active': {\n        backgroundColor: props.activeBgColor,\n        '&:hover': {\n          backgroundColor: shadeOrTintColor(props.activeBgColor, HOVER_COLOR_DEFAULT_RATIO)\n        },\n        '&:active': {\n          backgroundColor: shadeOrTintColor(props.activeBgColor, ACTIVE_COLOR_DEFAULT_RATIO)\n        }\n      },\n      '&.completed': {\n        backgroundColor: props.completedBgColor,\n        '&:hover': {\n          backgroundColor: shadeOrTintColor(props.completedBgColor, HOVER_COLOR_DEFAULT_RATIO)\n        },\n        '&:active': {\n          backgroundColor: shadeOrTintColor(props.completedBgColor, ACTIVE_COLOR_DEFAULT_RATIO)\n        }\n      }\n    };\n  },\n  StepButtonContent: function StepButtonContent(props) {\n    return {\n      color: props.inactiveTextColor,\n      fontSize: props.circleFontSize,\n      fontVariantNumeric: 'tabular-nums',\n      '&.active': {\n        color: props.activeTextColor\n      },\n      '&.completed': {\n        color: props.completedTextColor\n      }\n    };\n  }\n});\nvar StepperContext = /*#__PURE__*/React__default.createContext({\n  activeStep: 0,\n  hideConnectors: false,\n  nonLinear: false,\n  connectorStateColors: false\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  StepperContext.displayName = 'StepperContext';\n}\n\nvar connectorStyleDefaults = {\n  disabledColor: '#bdbdbd',\n  activeColor: '#ed1d24',\n  completedColor: '#a10308',\n  size: 1,\n  style: 'solid'\n};\nvar useConnectorStyles = /*#__PURE__*/createUseStyles({\n  ConnectorContainer: function ConnectorContainer(props) {\n    return {\n      top: \"calc((\" + props.stepSize + \" - \" + props.size + \") / 2)\",\n      left: \"calc(-50% + \" + props.stepSize + \" - 8px)\",\n      right: \"calc(50% + \" + props.stepSize + \" - 8px)\",\n      position: 'absolute'\n    };\n  },\n  Connector: function Connector(props) {\n    return {\n      borderTopStyle: props.style,\n      borderTopWidth: props.size,\n      borderColor: props.disabledColor,\n      display: 'block',\n      '&.completed': {\n        borderColor: props.completedColor\n      },\n      '&.active': {\n        borderColor: props.activeColor\n      }\n    };\n  }\n});\n\nvar convertNumericToPixel = function convertNumericToPixel(object, property) {\n  if (typeof object[property] === 'number') {\n    object[property] = object[property] + \"px\";\n  }\n};\n\nvar StepContext = /*#__PURE__*/React__default.createContext({\n  completed: false,\n  active: false,\n  disabled: false,\n  index: 0\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  StepContext.displayName = 'StepContext';\n}\n\nvar Connector = function Connector() {\n  var _React$useContext = React__default.useContext(StepperContext),\n      connectorStateColors = _React$useContext.connectorStateColors,\n      connectorStyleConfig = _React$useContext.connectorStyleConfig;\n\n  var _React$useContext2 = React__default.useContext(StepContext),\n      completed = _React$useContext2.completed,\n      active = _React$useContext2.active,\n      stepSize = _React$useContext2.stepSize;\n\n  var connectorStyle = _extends({}, connectorStyleDefaults, connectorStyleConfig, {\n    stepSize: (connectorStyleConfig === null || connectorStyleConfig === void 0 ? void 0 : connectorStyleConfig.stepSize) || stepSize\n  });\n\n  convertNumericToPixel(connectorStyle, 'stepSize');\n  convertNumericToPixel(connectorStyle, 'size');\n  var classes = useConnectorStyles(connectorStyle);\n  return React__default.createElement(\"div\", {\n    id: \"RFS-ConnectorContainer\",\n    className: classes.ConnectorContainer\n  }, React__default.createElement(\"span\", {\n    id: \"RFS-Connector\",\n    className: clsx(classes.Connector, {\n      completed: completed && connectorStateColors\n    }, {\n      active: active && connectorStateColors\n    })\n  }));\n};\n\nvar _excluded = [\"children\", \"contentClasses\"];\n\nvar StepButton = function StepButton(_ref) {\n  var children = _ref.children,\n      contentClasses = _ref.contentClasses,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var _React$useContext = React__default.useContext(StepContext),\n      completed = _React$useContext.completed,\n      disabled = _React$useContext.disabled,\n      index = _React$useContext.index;\n\n  return React__default.createElement(\"button\", Object.assign({\n    disabled: disabled\n  }, rest), React__default.createElement(\"span\", {\n    className: clsx(contentClasses, {\n      active: !disabled && !completed\n    }, {\n      completed: completed\n    })\n  }, children || index + 1));\n};\n\nvar useStepLabelStyles = /*#__PURE__*/createUseStyles({\n  LabelContainer: function LabelContainer(props) {\n    return {\n      width: '100%',\n      fontSize: props.fontSize || '0.875rem',\n      fontWeight: 400,\n      lineHeight: 1.4\n    };\n  },\n  Label: function Label(props) {\n    return {\n      display: 'block',\n      marginTop: 16,\n      textAlign: 'center',\n      fontWeight: props.fontWeight || 500\n    };\n  }\n});\n\nvar StepLabel = function StepLabel(_ref) {\n  var children = _ref.children,\n      fontSize = _ref.fontSize,\n      fontWeight = _ref.fontWeight;\n  var classes = useStepLabelStyles({\n    fontSize: fontSize,\n    fontWeight: fontWeight\n  });\n  return React__default.createElement(\"div\", {\n    id: \"RFS-LabelContainer\",\n    className: classes.LabelContainer\n  }, React__default.createElement(\"span\", {\n    id: \"RFS-Label\",\n    className: classes.Label\n  }, children));\n};\n\nvar _excluded$1 = [\"children\", \"label\", \"styleConfig\", \"completed\", \"active\", \"disabled\", \"className\", \"index\"];\n\nvar Step = function Step(_ref) {\n  var children = _ref.children,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? '' : _ref$label,\n      styleConfig = _ref.styleConfig,\n      completedProp = _ref.completed,\n      activeProp = _ref.active,\n      disabledProp = _ref.disabled,\n      className = _ref.className,\n      _ref$index = _ref.index,\n      index = _ref$index === void 0 ? 0 : _ref$index,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  var _React$useContext = useContext(StepperContext),\n      activeStep = _React$useContext.activeStep,\n      hideConnectors = _React$useContext.hideConnectors,\n      nonLinear = _React$useContext.nonLinear;\n\n  var _activeProp = activeProp,\n      active = _activeProp === void 0 ? false : _activeProp,\n      _completedProp = completedProp,\n      completed = _completedProp === void 0 ? false : _completedProp,\n      _disabledProp = disabledProp,\n      disabled = _disabledProp === void 0 ? false : _disabledProp;\n\n  if (activeStep === index) {\n    active = activeProp !== undefined ? activeProp : true;\n  } else if (!nonLinear && activeStep > index && !activeProp && !disabledProp) {\n    completed = completedProp !== undefined ? completedProp : true;\n  } else if (!nonLinear && activeStep < index && !activeProp && !completedProp) {\n    disabled = disabledProp !== undefined ? disabledProp : true;\n  }\n\n  var stepStyleProps = _extends({}, styleConfig, {\n    completed: completed && !disabled,\n    active: active || !disabled\n  });\n\n  var classes = useStepStyles(_extends({}, stepStyleDefaults, stepStyleProps.size && !stepStyleProps.circleFontSize && {\n    circleFontSize: \"calc(\" + stepStyleProps.size + \" / 2)\"\n  }, stepStyleProps));\n  var contextValue = {\n    completed: completed,\n    active: active,\n    disabled: disabled,\n    index: index,\n    stepSize: styleConfig && styleConfig.size || stepStyleDefaults.size\n  };\n  return createElement(StepContext.Provider, {\n    value: contextValue\n  }, index !== 0 && ( // If hideConnectors === 'inactive' render only active or completed connectors\n  // If hideConnectors is something other than 'inactive' or true render all connectors\n  hideConnectors === 'inactive' && (active || completed) || hideConnectors !== true && hideConnectors !== 'inactive') && createElement(Connector, null), createElement(\"div\", {\n    id: \"RFS-StepMain\",\n    className: classes.StepMain\n  }, createElement(StepButton, Object.assign({\n    id: \"RFS-StepButton\",\n    className: clsx(classes.StepButton, {\n      active: !disabled && !completed\n    }, {\n      completed: completed\n    }, className),\n    contentClasses: classes.StepButtonContent\n  }, rest), children || index + 1), label && createElement(StepLabel, {\n    fontSize: styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.labelFontSize,\n    fontWeight: styleConfig === null || styleConfig === void 0 ? void 0 : styleConfig.fontWeight\n  }, label)));\n};\n\nvar useStepperStyles = /*#__PURE__*/createUseStyles({\n  StepperContainer: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexDirection: 'row',\n    padding: 24,\n    fontFamily: 'Arial, Helvetica, sans-serif'\n  },\n  StepContainer: {\n    flex: 1,\n    position: 'relative',\n    paddingLeft: 8,\n    paddingRight: 8\n  }\n});\nvar _excluded$2 = [\"steps\", \"children\", \"connectorStateColors\", \"className\", \"stepClassName\", \"activeStep\", \"styleConfig\", \"connectorStyleConfig\", \"hideConnectors\", \"nonLinear\"]; // const createGenerateId: CreateGenerateId = () => {\n//   return generateId;\n// };\n// jss.setup({ createGenerateId });\n\nvar Stepper = function Stepper(_ref) {\n  var steps = _ref.steps,\n      children = _ref.children,\n      _ref$connectorStateCo = _ref.connectorStateColors,\n      connectorStateColors = _ref$connectorStateCo === void 0 ? false : _ref$connectorStateCo,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$stepClassName = _ref.stepClassName,\n      stepClassName = _ref$stepClassName === void 0 ? '' : _ref$stepClassName,\n      _ref$activeStep = _ref.activeStep,\n      activeStep = _ref$activeStep === void 0 ? 0 : _ref$activeStep,\n      styleConfig = _ref.styleConfig,\n      connectorStyleConfig = _ref.connectorStyleConfig,\n      _ref$hideConnectors = _ref.hideConnectors,\n      hideConnectors = _ref$hideConnectors === void 0 ? false : _ref$hideConnectors,\n      _ref$nonLinear = _ref.nonLinear,\n      nonLinear = _ref$nonLinear === void 0 ? false : _ref$nonLinear,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$2);\n\n  var classes = useStepperStyles();\n  var contextValue = React__default.useMemo(function () {\n    return {\n      activeStep: activeStep,\n      hideConnectors: hideConnectors,\n      nonLinear: nonLinear,\n      connectorStateColors: connectorStateColors && !nonLinear,\n      connectorStyleConfig: connectorStyleConfig\n    };\n  }, [activeStep, hideConnectors, nonLinear, connectorStateColors, connectorStyleConfig]);\n  var useStepsProp = steps instanceof Array && steps.length > 0;\n  var stepsArray = useStepsProp ? steps : React__default.Children.toArray(children);\n  var stepsToRender = stepsArray.map(function (step, index) {\n    if (!useStepsProp && !React__default.isValidElement(step)) return null;\n    var stepProps = {\n      className: stepClassName,\n      styleConfig: styleConfig,\n      index: index\n    };\n    return React__default.createElement(\"div\", {\n      key: index,\n      id: \"RFS-StepContainer\",\n      className: classes.StepContainer\n    }, React__default.isValidElement(step) ? React__default.cloneElement(step, _extends({}, stepProps, step.props)) : React__default.createElement(Step, Object.assign({}, stepProps, typeof step === 'object' ? step : {})));\n  });\n  return React__default.createElement(StepperContext.Provider, {\n    value: contextValue\n  }, React__default.createElement(\"div\", Object.assign({\n    id: \"RFS-StepperContainer\",\n    className: clsx(classes.StepperContainer, className)\n  }, rest), stepsToRender));\n};\n\nexport { Step, Stepper };","map":null,"metadata":{},"sourceType":"module"}