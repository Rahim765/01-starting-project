{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"D:\\\\React-projects\\\\01-starting-project\\\\src\\\\components\\\\steps\\\\Step4.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport validation from 'react-validation-mixin';\nimport strategy from 'joi-validation-strategy';\nimport Joi from 'joi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Step4 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailEmergency: props.getStore().emailEmergency\n    };\n    this.validatorTypes = {\n      emailEmergency: Joi.string().email().required()\n    };\n    this.getValidatorData = this.getValidatorData.bind(this);\n    this.renderHelpText = this.renderHelpText.bind(this);\n    this.isValidated = this.isValidated.bind(this);\n  }\n\n  isValidated() {\n    return new Promise((resolve, reject) => {\n      this.props.validate(error => {\n        if (error) {\n          reject(); // form contains errors\n\n          return;\n        }\n\n        if (this.props.getStore().emailEmergency != this.getValidatorData().emailEmergency) {\n          // only update store of something changed\n          this.props.updateStore({ ...this.getValidatorData(),\n            savedToCloud: false // use this to notify step4 that some changes took place and prompt the user to save again\n\n          }); // Update store here (this is just an example, in reality you will do it via redux or flux)\n        }\n\n        resolve(); // form is valid, fire action\n      });\n    });\n  }\n\n  getValidatorData() {\n    return {\n      emailEmergency: this.refs.emailEmergency.value\n    };\n  }\n\n  onChange(e) {\n    let newState = {};\n    newState[e.target.name] = e.target.value;\n    this.setState(newState);\n  }\n\n  renderHelpText(message, id) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"val-err-tooltip\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 57\n      }, this)\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }, this);\n  }\n\n  render() {\n    // explicit class assigning based on validation\n    let notValidClasses = {};\n    notValidClasses.emailEmergencyCls = this.props.isValid('emailEmergency') ? 'no-error col-md-8' : 'has-error col-md-8';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step step4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"Form\",\n          className: \"form-horizontal\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"control-label col-md-12 \",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Step 4: Form Validation using \\\"react-validation-mixin\\\" Example\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group col-md-12 content form-block-holder\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"control-label col-md-4\",\n              children: \"Your Emergency Email Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: notValidClasses.emailEmergencyCls,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                ref: \"emailEmergency\",\n                name: \"emailEmergency\",\n                autoComplete: \"off\",\n                type: \"email\",\n                className: \"form-control\",\n                placeholder: \"john.smith@example.com\",\n                required: true,\n                defaultValue: this.state.emailEmergency,\n                onBlur: this.props.handleValidation('emailEmergency'),\n                onChange: this.onChange.bind(this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 25\n              }, this), this.props.getValidationMessages('emailEmergency').map(this.renderHelpText)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group hoc-alert col-md-12 form-block-holder\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"col-md-12 control-label\",\n              children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"As shown in this example, you can also use \", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"https://github.com/jurassix/react-validation-mixin\",\n                  target: \"_blank\",\n                  children: \"react-validation-mixin\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 70\n                }, this), \" to handle your validations as well! (as of v4.3.2)!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"green\",\n              children: \"... so StepZilla step Components can either use basic JS validation or Higer Order Component (HOC) based validation with react-validation-mixin.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nStep4.propTypes = {\n  errors: PropTypes.object,\n  validate: PropTypes.func,\n  isValid: PropTypes.func,\n  handleValidation: PropTypes.func,\n  getValidationMessages: PropTypes.func,\n  clearValidations: PropTypes.func,\n  getStore: PropTypes.func,\n  updateStore: PropTypes.func\n};\nexport default validation(strategy)(Step4);","map":{"version":3,"sources":["D:/React-projects/01-starting-project/src/components/steps/Step4.js"],"names":["React","Component","PropTypes","validation","strategy","Joi","Step4","constructor","props","state","emailEmergency","getStore","validatorTypes","string","email","required","getValidatorData","bind","renderHelpText","isValidated","Promise","resolve","reject","validate","error","updateStore","savedToCloud","refs","value","onChange","e","newState","target","name","setState","message","id","render","notValidClasses","emailEmergencyCls","isValid","handleValidation","getValidationMessages","map","propTypes","errors","object","func","clearValidations"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport validation from 'react-validation-mixin';\nimport strategy from 'joi-validation-strategy';\nimport Joi from 'joi';\n\nclass Step4 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      emailEmergency: props.getStore().emailEmergency\n    };\n\n    this.validatorTypes = {\n      emailEmergency: Joi.string().email().required()\n    };\n\n    this.getValidatorData = this.getValidatorData.bind(this);\n    this.renderHelpText = this.renderHelpText.bind(this);\n    this.isValidated = this.isValidated.bind(this);\n  }\n\n  isValidated() {\n    return new Promise((resolve, reject) => {\n      this.props.validate((error) => {\n        if (error) {\n          reject(); // form contains errors\n          return;\n        }\n\n        if (this.props.getStore().emailEmergency != this.getValidatorData().emailEmergency) { // only update store of something changed\n          this.props.updateStore({\n            ...this.getValidatorData(),\n            savedToCloud: false // use this to notify step4 that some changes took place and prompt the user to save again\n          });  // Update store here (this is just an example, in reality you will do it via redux or flux)\n        }\n\n        resolve(); // form is valid, fire action\n      });\n    });\n  }\n\n  getValidatorData() {\n    return {\n      emailEmergency: this.refs.emailEmergency.value,\n    }\n  };\n\n  onChange(e) {\n      let newState = {};\n      newState[e.target.name] = e.target.value;\n      this.setState(newState);\n  }\n\n  renderHelpText(message, id) {\n      return (<div className=\"val-err-tooltip\" key={id}><span>{message}</span></div>);\n  };\n\n  render() {\n    // explicit class assigning based on validation\n    let notValidClasses = {};\n    notValidClasses.emailEmergencyCls = this.props.isValid('emailEmergency') ?\n        'no-error col-md-8' : 'has-error col-md-8';\n\n    return (\n        <div className=\"step step4\">\n            <div className=\"row\">\n                <form id=\"Form\" className=\"form-horizontal\">\n                  <div className=\"form-group\">\n                    <label className=\"control-label col-md-12 \">\n                        <h1>Step 4: Form Validation using \"react-validation-mixin\" Example</h1>\n                    </label>\n                  </div>\n                  <div className=\"form-group col-md-12 content form-block-holder\">\n                    <label className=\"control-label col-md-4\">\n                        Your Emergency Email Address\n                    </label>\n                    <div className={notValidClasses.emailEmergencyCls}>\n                        <input\n                            ref=\"emailEmergency\"\n                            name=\"emailEmergency\"\n                            autoComplete=\"off\"\n                            type=\"email\"\n                            className=\"form-control\"\n                            placeholder=\"john.smith@example.com\"\n                            required\n                            defaultValue={this.state.emailEmergency}\n                            onBlur={this.props.handleValidation('emailEmergency')}\n                            onChange={this.onChange.bind(this)}\n                        />\n\n                        {this.props.getValidationMessages('emailEmergency').map(this.renderHelpText)}\n                    </div>\n                  </div>\n                  <div className=\"form-group hoc-alert col-md-12 form-block-holder\">\n                    <label className=\"col-md-12 control-label\">\n                      <h4>As shown in this example, you can also use <a href=\"https://github.com/jurassix/react-validation-mixin\" target=\"_blank\">react-validation-mixin</a> to handle your validations as well! (as of v4.3.2)!</h4>\n                    </label>\n                    <br />\n                    <div className=\"green\">... so StepZilla step Components can either use basic JS validation or Higer Order Component (HOC) based validation with react-validation-mixin.</div>\n                  </div>\n                </form>\n            </div>\n        </div>\n    )\n  }\n}\n\nStep4.propTypes = {\n  errors: PropTypes.object,\n  validate: PropTypes.func,\n  isValid: PropTypes.func,\n  handleValidation: PropTypes.func,\n  getValidationMessages: PropTypes.func,\n  clearValidations: PropTypes.func,\n  getStore: PropTypes.func,\n  updateStore: PropTypes.func\n};\n\nexport default validation(strategy)(Step4);\n"]},"metadata":{},"sourceType":"module"}