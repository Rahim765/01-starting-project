{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"D:\\\\React-projects\\\\01-starting-project\\\\src\\\\components\\\\steps\\\\Step2.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Step2 = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"step step2\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"Form\",\n      className: \"form-horizontal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"col-md-12 control-label\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Step 2: Pure Component Example\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: [\"You can use Pure React Components as well (as of v4.2.0)!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"red\",\n              children: [\"... but you cant provide validation logic here (i.e. you cant specify an \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"bold\",\n                children: \"isValidated()\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 17,\n                columnNumber: 114\n              }, this), \" method and have StepZilla use that to determine if it can move to the next step). This is a limitation of using a Pure Component.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"green\",\n              children: [\"... so use a Pure Component if you just want to show some presentation content and a regular React Component (which extends from React.Component) if you need to provide Component level validation checkpoints via \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"bold\",\n                children: \"isValidated()\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 19,\n                columnNumber: 255\n              }, this), \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 eg-jump-lnk\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              onClick: () => props.jumpToStep(0),\n              children: \"e.g. showing how we use the jumpToStep method helper method to jump back to step 1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 5\n}, this);\n\n_c = Step2;\nexport default Step2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Step2\");","map":{"version":3,"sources":["D:/React-projects/01-starting-project/src/components/steps/Step2.js"],"names":["React","Step2","props","jumpToStep"],"mappings":"AAAA;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,iBACV;AAAK,EAAA,SAAS,EAAC,YAAf;AAAA,yBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAM,MAAA,EAAE,EAAC,MAAT;AAAgB,MAAA,SAAS,EAAC,iBAA1B;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AAAO,UAAA,SAAS,EAAC,yBAAjB;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,iGAEI;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAEU;AAAA;AAAA;AAAA;AAAA,oBAFV,eAGI;AAAM,cAAA,SAAS,EAAC,KAAhB;AAAA,mHAA+F;AAAM,gBAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA/F;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAIU;AAAA;AAAA;AAAA;AAAA,oBAJV,eAKI;AAAM,cAAA,SAAS,EAAC,OAAhB;AAAA,8PAA4O;AAAM,gBAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA5O;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAA,mCACE;AAAG,cAAA,IAAI,EAAC,GAAR;AAAY,cAAA,OAAO,EAAE,MAAMA,KAAK,CAACC,UAAN,CAAiB,CAAjB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADJ;;KAAMF,K;AA0BN,eAAeA,KAAf","sourcesContent":["'use strict';\n\nimport React from 'react';\n\nconst Step2 = (props) => (\n    <div className=\"step step2\">\n      <div className=\"row\">\n        <form id=\"Form\" className=\"form-horizontal\">\n          <div className=\"form-group\">\n            <label className=\"col-md-12 control-label\">\n              <h1>Step 2: Pure Component Example</h1>\n            </label>\n            <div className=\"row content\">\n              <div className=\"col-md-12\">\n                  You can use Pure React Components as well (as of v4.2.0)!\n                  <br /><br />\n                  <span className=\"red\">... but you cant provide validation logic here (i.e. you cant specify an <span className=\"bold\">isValidated()</span> method and have StepZilla use that to determine if it can move to the next step). This is a limitation of using a Pure Component.</span>\n                  <br /><br />\n                  <span className=\"green\">... so use a Pure Component if you just want to show some presentation content and a regular React Component (which extends from React.Component) if you need to provide Component level validation checkpoints via <span className=\"bold\">isValidated()</span>.</span>\n              </div>\n              <div className=\"col-md-12 eg-jump-lnk\">\n                <a href=\"#\" onClick={() => props.jumpToStep(0)}>e.g. showing how we use the jumpToStep method helper method to jump back to step 1</a>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n)\n\nexport default Step2;\n"]},"metadata":{},"sourceType":"module"}