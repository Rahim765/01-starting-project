{"ast":null,"code":"var _jsxFileName = \"D:\\\\React-projects\\\\01-starting-project\\\\src\\\\components\\\\steps\\\\Step5.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react'; // We need to wrap component in `forwardRef` in order to gain\n// access to the ref object that is assigned using the `ref` prop.\n// This ref is passed as the second parameter to the function component.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HooksWithValidation = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((_ref, ref) => {\n  _s();\n\n  let {\n    jumpToStep\n  } = _ref;\n  const [valid, setValid] = useState(false);\n  const [uiError, setUiError] = useState(false);\n\n  const toggleValidState = () => {\n    setUiError(false);\n    setValid(!valid);\n  }; // The component instance will be extended\n  // with whatever you return from the callback passed\n  // as the second argument\n\n\n  useImperativeHandle(ref, () => ({\n    isValidated() {\n      if (!valid) {\n        setUiError(true);\n        return false;\n      } else {\n        // all good, let's proceed\n        return true;\n      }\n    }\n\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"step step5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"Form\",\n        className: \"form-horizontal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"col-md-12 control-label\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Step 5: A React Hooks Component Example (with state based validation)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"My validation state is \", valid.toString().toUpperCase(), \".\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 15\n              }, this), !valid && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 28\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: [\"If you want to move to the \\\"Next\\\" step you need change the validation state to TRUE. This demonstrates how a modern Hooks based React component can use the \", /*#__PURE__*/_jsxDEV(\"u\", {\n                    children: \"isValidated\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 41,\n                    columnNumber: 218\n                  }, this), \" method to instruct StepZilla to proceed to \\\"Next\\\". Use the button below to toggle it to TRUE.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"btn btn-info\",\n                onClick: toggleValidState,\n                style: {\n                  marginLeft: '0'\n                },\n                children: \"Toggle Validation State\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 15\n              }, this), uiError && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"val-err-tooltip\",\n                style: {\n                  marginTop: '1rem',\n                  display: 'table'\n                },\n                children: \"You need to use the the toggle button above to set validation state to TRUE to proceed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12 eg-jump-lnk\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"#\",\n                onClick: () => jumpToStep(0),\n                children: \"e.g. showing how we use the jumpToStep method helper method to jump back to step 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n}, \"D+u/prQ7zIg/Bf0E6RK63P7cbfg=\")), \"D+u/prQ7zIg/Bf0E6RK63P7cbfg=\");\n\n_c2 = HooksWithValidation;\nexport default HooksWithValidation;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HooksWithValidation$forwardRef\");\n$RefreshReg$(_c2, \"HooksWithValidation\");","map":{"version":3,"sources":["D:/React-projects/01-starting-project/src/components/steps/Step5.js"],"names":["React","useState","forwardRef","useImperativeHandle","HooksWithValidation","ref","jumpToStep","valid","setValid","uiError","setUiError","toggleValidState","isValidated","toString","toUpperCase","marginLeft","marginTop","display"],"mappings":"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","sourcesContent":["import React, {useState, forwardRef, useImperativeHandle} from 'react';\n\n// We need to wrap component in `forwardRef` in order to gain\n// access to the ref object that is assigned using the `ref` prop.\n// This ref is passed as the second parameter to the function component.\nconst HooksWithValidation = forwardRef(({jumpToStep}, ref) => {\n  const [valid, setValid] = useState(false);\n  const [uiError, setUiError] = useState(false);\n  \n  const toggleValidState = () => {\n    setUiError(false);\n    setValid(!valid);\n  }\n\n  // The component instance will be extended\n  // with whatever you return from the callback passed\n  // as the second argument\n  useImperativeHandle(ref, () => ({\n    isValidated() {\n      if (!valid) {\n        setUiError(true);\n        return false;\n      } else {\n        // all good, let's proceed\n        return true;\n      }\n    }\n  }));\n\n  return <div className=\"step step5\">\n    <div className=\"row\">\n      <form id=\"Form\" className=\"form-horizontal\">\n        <div className=\"form-group\">\n          <label className=\"col-md-12 control-label\">\n            <h1>Step 5: A React Hooks Component Example (with state based validation)</h1>\n          </label>\n          <div className=\"row content\">\n            <div className=\"col-md-12\">\n              <br />\n              <span>My validation state is {valid.toString().toUpperCase()}.</span>\n              {!valid && <><br /><br /><span className=\"red\">If you want to move to the \"Next\" step you need change the validation state to TRUE. This demonstrates how a modern Hooks based React component can use the <u>isValidated</u> method to instruct StepZilla to proceed to \"Next\". Use the button below to toggle it to TRUE.</span></>}\n              <br /><br />\n              <div className=\"btn btn-info\" onClick={toggleValidState} style={{marginLeft: '0'}}>Toggle Validation State</div>\n              {uiError && <div className=\"val-err-tooltip\" style={{marginTop: '1rem', display: 'table'}}>You need to use the the toggle button above to set validation state to TRUE to proceed</div>}\n            </div>\n            <div className=\"col-md-12 eg-jump-lnk\">\n              <a href=\"#\" onClick={() => jumpToStep(0)}>e.g. showing how we use the jumpToStep method helper method to jump back to step 1</a>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n});\n\nexport default HooksWithValidation;\n"]},"metadata":{},"sourceType":"module"}